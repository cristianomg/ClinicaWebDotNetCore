// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unit.ProjetoCodeFirst.Clinica.Infrastructure.Context;

namespace Unit.ProjetoCodeFirst.Clinica.Infrastructure.Migrations
{
    [DbContext(typeof(ClinicaDbContext))]
    partial class ClinicaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Atendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AtendeDia")
                        .HasColumnType("bit");

                    b.Property<bool>("AtendePlano")
                        .HasColumnType("bit");

                    b.Property<int>("ConsultaID")
                        .HasColumnType("int");

                    b.Property<int>("DiaSemanaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HoraFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaID")
                        .IsUnique();

                    b.HasIndex("DiaSemanaId");

                    b.HasIndex("MedicoId");

                    b.ToTable("Atendimentos");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("TipoConsulta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consultas");

                    b.HasDiscriminator<string>("TipoConsulta").HasValue("Consulta");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.DiaSemana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("DiaSemanas");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Exame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.MedicoPlano", b =>
                {
                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PlanoId")
                        .HasColumnType("int");

                    b.HasKey("MedicoId", "PlanoId");

                    b.HasIndex("PlanoId");

                    b.ToTable("MedicosPlanos");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PlanoID")
                        .HasColumnType("int");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("PlanoID");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Plano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Planos");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.PlanoExame", b =>
                {
                    b.Property<int>("ExameId")
                        .HasColumnType("int");

                    b.Property<int>("PlanoId")
                        .HasColumnType("int");

                    b.HasKey("ExameId", "PlanoId");

                    b.HasIndex("PlanoId");

                    b.ToTable("PlanosExames");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.PrescricaoMedicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultaId")
                        .HasColumnType("int");

                    b.Property<string>("FormaUso")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.ToTable("PrescricaoMedicamentos");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.RequisicaoExame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAgendamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataRequisicao")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExameId")
                        .HasColumnType("int");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("ExameId");

                    b.ToTable("RequisicaoExames");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.ConsultaParticular", b =>
                {
                    b.HasBaseType("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Consulta");

                    b.Property<string>("FormaPagamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("ConsultaParticula");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.ConsultaPlano", b =>
                {
                    b.HasBaseType("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Consulta");

                    b.Property<int>("PlanoId")
                        .HasColumnType("int");

                    b.HasIndex("PlanoId");

                    b.HasDiscriminator().HasValue("ConsultaPlano");
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Atendimento", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Consulta", "Consulta")
                        .WithOne("Atendimento")
                        .HasForeignKey("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Atendimento", "ConsultaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.DiaSemana", "DiaSemana")
                        .WithMany("Atendimentos")
                        .HasForeignKey("DiaSemanaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Medico", "Medico")
                        .WithMany("Atendimentos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Consulta", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Endereco", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Estado", "Estado")
                        .WithMany("Enderecos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Medico", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Especialidade", "Especialidade")
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.MedicoPlano", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Medico", "Medico")
                        .WithMany("MedicoPlanos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Plano", "Plano")
                        .WithMany("MedicoPlanos")
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Paciente", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Plano", "Plano")
                        .WithMany()
                        .HasForeignKey("PlanoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.PlanoExame", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Exame", "Exame")
                        .WithMany("PlanosExame")
                        .HasForeignKey("ExameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Plano", "Plano")
                        .WithMany("PlanosExame")
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.PrescricaoMedicamento", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Consulta", "Consulta")
                        .WithMany("PrescricaoMedicamentos")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.RequisicaoExame", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Consulta", "Consulta")
                        .WithMany("RequisicaoExames")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Exame", "Exame")
                        .WithMany("RequisicaoExames")
                        .HasForeignKey("ExameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.ConsultaPlano", b =>
                {
                    b.HasOne("Unit.ProjetoCodeFirst.Clinica.Domain.Domain.Plano", "Plano")
                        .WithMany("ConsultasPlano")
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
